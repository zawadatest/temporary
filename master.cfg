# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}
####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("buildservermondok", "pass")]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.HgPoller(
        'ssh://vcs@nexus/HFC/Common',
        workdir='hgpoller-hfc_common', branch='default',
        pollinterval=300,
	project='hfc_common'))
c['change_source'].append(changes.HgPoller(
        'ssh://vcs@nexus/HFC/BL751/BL751_APP',
        workdir='hgpoller-bl751', branch='default',
        pollinterval=300,
        project='bl751'))

c['change_source'].append(changes.HgPoller(
        'ssh://vcs@nexus/Avatar/manager',
        workdir='hgpoller-manager', branch='default',
        pollinterval=300,
        project='manager'))

c['change_source'].append(changes.HgPoller(
        'ssh://vcs@nexus/Avatar/board_mgmt/rpd_control',
        workdir='hgpoller-rpd_control', branch='default',
        pollinterval=300,
        project='rpd_control'))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="hfc_common_change",
                            change_filter=util.ChangeFilter(project='hfc_common', branch='default'),
                            treeStableTimer=60,
			    builderNames=['hfc_common']))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="hfc_common_force",
                            builderNames=['hfc_common']))

c['schedulers'].append(schedulers.Triggerable(
                            name='bl751_trigger',
			    builderNames=['bl751']))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="bl751_change",
                            change_filter=util.ChangeFilter(project='bl751', branch='default'),
                            treeStableTimer=60,
                            builderNames=['bl751']))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="bl751_force",
			    builderNames=['bl751']))

c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="manager_change",
                            change_filter=util.ChangeFilter(project='manager', branch='default'),
                            treeStableTimer=60,
			    builderNames=['manager']))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="manager_force",
                            builderNames=['manager']))

c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="rpd_control_change",
                            change_filter=util.ChangeFilter(project='rpd_control', branch='default'),
                            treeStableTimer=60,
                            builderNames=['rpd_control']))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="rpd_control_force",
                            builderNames=['rpd_control_force_build']))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

import datetime
@util.renderer
def now(props):
    return datetime.datetime.now().strftime("%Y.%m.%d-%H:%M:%S")

# HFC Common
hfc_common_factory = util.BuildFactory()
hfc_common_factory.addStep(steps.Mercurial(repourl='ssh://vcs@nexus/HFC/Common', mode='full', method='fresh', workdir='.', branchType='inrepo'))
hfc_common_factory.addStep(steps.MakeDirectory(dir='build'))
hfc_common_factory.addStep(steps.ShellCommand(workdir='build', command='cmake -DCMAKE_TOOLCHAIN_FILE="../toolchain/toolchain-arm-none-eabi.cmake" ../src'))
hfc_common_factory.addStep(steps.Compile(workdir='build', command=['make', 'install']))
hfc_common_factory.addStep(steps.Trigger(['bl751_trigger'], alwaysUseLatest=True))

# BL751
bl751_factory = util.BuildFactory()
bl751_factory.addStep(steps.Mercurial(repourl='ssh://vcs@nexus/HFC/BL751/BL751_APP', mode='full', method='fresh', workdir='.', branchType='inrepo'))
bl751_factory.addStep(steps.MakeDirectory(dir='build'))
bl751_factory.addStep(steps.ShellCommand(workdir='build', command='cmake -DCMAKE_TOOLCHAIN_FILE="../toolchain/gcc-arm-linux.cmake" -DCOMMON_DIR=../../hfc_common/Install ../src'))
bl751_factory.addStep(steps.Compile(workdir='build', command=['make']))
bl751_factory.addStep(steps.FileUpload(workdir='build', workersrc='bl751_app.hex', masterdest=util.Interpolate('~/master/public_html/bl751_%(kw:now)s.hex', now=now), url=util.Interpolate('http://192.168.40.59:8080/bl751_%(kw:now)s.hex',now=now)))

# RPD manager
manager_factory = util.BuildFactory()
manager_factory.addStep(steps.Mercurial(repourl='ssh://vcs@nexus/Avatar/manager', mode='full', method='fresh', workdir='.', branchType='inrepo'))
manager_factory.addStep(steps.ShellCommand(workdir='.', command='./build.sh'))
manager_factory.addStep(steps.FileUpload(workdir='proto/docs', workersrc='manager.html', masterdest='~/master/public_html/manager.html', url='http://192.168.40.59:8080/manager.html'))

# RPD control
rpd_control_factory = util.BuildFactory()
rpd_control_factory.addStep(steps.Mercurial(repourl='ssh://vcs@nexus/Avatar/board_mgmt/rpd_control', mode='full', method='fresh', workdir='.', branchType='inrepo'))
rpd_control_factory.addStep(steps.MakeDirectory(dir='build'))
rpd_control_factory.addStep(steps.ShellCommand(workdir='build', command='cmake -DCMAKE_TOOLCHAIN_FILE="../toolchains/clang-arm.cmake" ../src'))
rpd_control_factory.addStep(steps.Compile(workdir='build', command=['make', 'all'], warnOnWarnings=True))
rpd_control_factory.addStep(steps.Compile(name='check syntax', workdir='build', command=['make', 'check'], warnOnWarnings=True))
rpd_control_factory.addStep(steps.Compile(name='generate docs', workdir='build', command=['make', 'doc']))
rpd_control_factory.addStep(steps.FileUpload(workdir='build', workersrc='rpd.hex', 
masterdest=util.Interpolate('~/master/public_html/rpd_%(prop:buildnumber)s.hex', now=now), 
url=util.Interpolate('http://192.168.40.59:8080/rpd_%(kw:now)s.hex',now=now)))

#MONDOK
# RPD control MONDOK
rpd_control_force_factory = util.BuildFactory()
#build old version of software (rev 172) and upload file rpd_2.fw to tftp server with proper permissions
rpd_control_force_factory.addStep(steps.ShellCommand(name='Delete old files', workdir='../', command=['rm','-rf','rpd_control_force_build']))
#clone revision no. 172
rpd_control_force_factory.addStep(steps.ShellCommand(name='Clone revision 172', workdir='.', command=['hg', 'clone', '-r', '172', 'ssh://vcs@nexus/Avatar/board_mgmt/rpd_control', 'rpd_control_old']))
rpd_control_force_factory.addStep(steps.MakeDirectory(dir='rpd_control_old/buildOldVersion'))
rpd_control_force_factory.addStep(steps.ShellCommand(name='cmake', workdir='rpd_control_old/buildOldVersion', command='cmake -DCMAKE_TOOLCHAIN_FILE="../toolchains/clang-arm.cmake" ../src'))
rpd_control_force_factory.addStep(steps.Compile(name='make all', workdir='rpd_control_old/buildOldVersion', command=['make', 'all'], warnOnWarnings=True))
rpd_control_force_factory.addStep(steps.Compile(name='check syntax', workdir='rpd_control_old/buildOldVersion', command=['make', 'check'], warnOnWarnings=True))
rpd_control_force_factory.addStep(steps.Compile(name='generate docs', workdir='rpd_control_old/buildOldVersion', command=['make', 'doc']))
rpd_control_force_factory.addStep(steps.ShellCommand(name='Execute merger.py with params', workdir='rpd_control_old/tools', command=['python', 'merger.py', '-m', '../../../../rpd_2.mf', '-b']))
rpd_control_force_factory.addStep(steps.FileUpload(workdir='rpd_control_old/tools', workersrc='rpd_2.fw', 
masterdest=util.Interpolate('/var/tftp/rpd_2.fw'), 
url=util.Interpolate('http://192.168.40.59:8080/rpd_2.fw')))
#chmod
rpd_control_force_factory.addStep(steps.ShellCommand(name='Set permissions', workdir='/var/tftp/', command=['chmod', '777', 'rpd_2.fw'])) #old version is on tftp

rpd_control_force_factory.addStep(steps.ShellCommand(name='Delete old files', workdir='../', command=['rm','-rf','rpd_control_force_build']))
#build newest version of software
rpd_control_force_factory.addStep(steps.Mercurial(name='Clone newest version', repourl='ssh://vcs@nexus/Avatar/board_mgmt/rpd_control', mode='full', method='fresh', workdir='.', branchType='inrepo'))
rpd_control_force_factory.addStep(steps.MakeDirectory(dir='build'))
rpd_control_force_factory.addStep(steps.ShellCommand(name='cmake', workdir='build', command='cmake -DCMAKE_TOOLCHAIN_FILE="../toolchains/clang-arm.cmake" ../src'))
rpd_control_force_factory.addStep(steps.Compile(name='make all', workdir='build', command=['make', 'all'], warnOnWarnings=True))
rpd_control_force_factory.addStep(steps.Compile(name='check syntax', workdir='build', command=['make', 'check'], warnOnWarnings=True))
rpd_control_force_factory.addStep(steps.Compile(name='generate docs', workdir='build', command=['make', 'doc']))
rpd_control_force_factory.addStep(steps.FileUpload(workdir='build', workersrc='rpd.hex', 
masterdest=util.Interpolate('~/master/public_html/rpd_%(prop:buildnumber)s.hex', now=now), 
url=util.Interpolate('http://192.168.40.59:8080/rpd_%(kw:now)s.hex',now=now)))
rpd_control_force_factory.addStep(steps.ShellCommand(name='Execute merger.py with params', workdir='tools', command=['python', 'merger.py', '-m', '../../../rpd.mf', '-b']))
rpd_control_force_factory.addStep(steps.FileUpload(workdir='tools', workersrc='rpd.fw', 
masterdest=util.Interpolate('/var/tftp/rpd.fw'), 
url=util.Interpolate('http://192.168.40.59:8080/rpd.fw')))
rpd_control_force_factory.addStep(steps.ShellCommand(name='Set permissions', workdir='/var/tftp/', command=['chmod', '777', 'rpd.fw']))
#wywolanie upgrade'a
rpd_control_force_factory.addStep(steps.ShellCommand(name='Usefull for mondok', workdir='tools', command=['cp', '../../../upgrade.py', '../tests/']))
#rpd_control_force_factory.addStep(steps.ShellCommand(name='Tests', workdir='tools', command=['python', 'main.py']))

#MONDOK
#Force RPD control with use of lpc21isp
#rpd_control_force_factory = util.BuildFactory()
#rpd_control_force_factory.addStep(steps.Mercurial(repourl='ssh://vcs@nexus/Avatar/board_mgmt/rpd_control', mode='full', method='fresh', workdir='.', branchType='inrepo'))
#rpd_control_force_factory.addStep(steps.MakeDirectory(dir='build'))
#rpd_control_force_factory.addStep(steps.ShellCommand(workdir='build', command='cmake -DCMAKE_TOOLCHAIN_FILE="../toolchains/clang-arm.cmake" ../src'))
#rpd_control_force_factory.addStep(steps.Compile(workdir='build', command=['make', 'all'], warnOnWarnings=True))
#rpd_control_force_factory.addStep(steps.Compile(name='check syntax', workdir='build', command=['make', 'check'], warnOnWarnings=True))
#rpd_control_force_factory.addStep(steps.Compile(name='generate docs', workdir='build', command=['make', 'doc']))
#rpd_control_force_factory.addStep(steps.FileUpload(workdir='build', workersrc='rpd.hex', 
#masterdest=util.Interpolate('~/master/public_html/rpd_%(prop:buildnumber)s.hex', now=now), 
#url=util.Interpolate('http://192.168.40.59:8080/rpd_%(kw:now)s.hex',now=now)))

#upload to device with lpc21isp
#rpd_control_force_factory.addStep(steps.ShellCommand(workdir='build', 
#command=['lpc21isp', '-control' 'rpd.hex', '/dev/ttyUSB0', '57600', '12000'], haltOnFailure=True))

#def testPassed(step):
#    if step.getProperty("ss" == "windows"):
#       return True
#    return false

#start tests
#rpd_control_force_factory.addStep(steps.ShellCommand(workdir='tests', command=['python' 'main.py'], doStepIf=testPassed))

#upgrade
#run merger.py
#rpd_control_force_factory.addStep(steps.ShellCommand(workdir='tools', command=['python', 'merger.py', '-m rpd.mf', '-b'], haltOnFailure=True))

c['builders'] = []
c['builders'].append(util.BuilderConfig(name="hfc_common", workernames=["buildservermondok"], factory=hfc_common_factory))
c['builders'].append(util.BuilderConfig(name="bl751", workernames=["buildservermondok"], factory=bl751_factory))
c['builders'].append(util.BuilderConfig(name="manager", workernames=["buildservermondok"], factory=manager_factory))
c['builders'].append(util.BuilderConfig(name="rpd_control", workernames=["buildservermondok"], factory=rpd_control_factory))
c['builders'].append(util.BuilderConfig(name="rpd_control_force_build", workernames=["buildservermondok"], factory=rpd_control_force_factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

#irc reporter
#from buildbot.reporters import irc
#irc = irc.IRC("nexus", "buildbot", channels = ["#b112"], notify_events={'exception': 1, 'finished' : 1, 'warnings' : 1})
#from buildbot.plugins import reporters

c['status'] = []
c['services'] = []
#c['services'].append(mn)
#c['services'].append(irc)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "VECTOR"
c['titleURL'] = "http://vcs-nexus/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in 
# the 'www' entry below, but with an externally-visible host name which the 
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://192.168.40.59:8100/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8100,
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
